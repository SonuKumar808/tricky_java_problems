public class TrickyQuestion {
    public static void main(String[] args) {
        List<Integer> numbers = List.of(2, 4, 6, 8);
        List<Integer> result = numbers.stream().map(
                n -> {
                    if (n == 6) return null;
                    return n * 2;
                }).collect(Collectors.toList());
        System.out.println(result);
    }
}

// Output: [4, 8, null, 16]
‚ö†Ô∏è Tricky Part ‚Äì Returning null in map()
This line is key:
if (n == 6) return null;
‚óº Java Streams allow null values to be returned in map().
‚óº However, when collecting to a List<Integer>, a null is inserted into the list.
‚óº So the result becomes: [4, 8, null, 16].

üß™ Is this safe?
Yes, this will compile and run successfully because:
‚óº map() can return null.
‚óº List<Integer> can contain null values.
‚óº System.out.println() prints the null as part of the list.